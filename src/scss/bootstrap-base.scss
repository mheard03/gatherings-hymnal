// Configuration
@import "../../node_modules/bootstrap/scss/functions";

// Kill color functions
$show-warnings: false;
@function to-rgb($value) {
  @if $show-warnings {
    @warn "to-rgb called"
  }
  @return "#ff0000";
}
@function tint-color($color, $weight) {
  @if $show-warnings {
    @warn "tint-color called"
  }
  @return "#ff0000";
}
@function shade-color($color, $weight) {
  @if $show-warnings {
    @warn "shade-color called"
  }
  @return "#ff0000";
}

// tweak _assert-ascending to allow css math
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if type-of($num) == "number" {
      @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {
        // Do nothing
      } @else if not comparable($prev-num, $num) {
        @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
      } @else if $prev-num >= $num {
        @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
      }
      $prev-key: $key;
      $prev-num: $num;
    }
  }
}

@import "bootstrap-custom-variables";
@import "../../node_modules/bootstrap/scss/variables";

// re-enable color function warnings
$show-warnings: true;

@import "../../node_modules/bootstrap/scss/mixins";
@import "bootstrap-custom-mixins";
@import "../../node_modules/bootstrap/scss/utilities";
   
/*
// Layout & components
@import "../../node_modules/bootstrap/scss/reboot";
@import "../../node_modules/bootstrap/scss/type";
@import "_links";
*/